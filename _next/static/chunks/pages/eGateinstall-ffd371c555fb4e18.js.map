{"version":3,"file":"static/chunks/pages/eGateinstall-ffd371c555fb4e18.js","mappings":"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","sources":["webpack://_N_E/?a1af","webpack://_N_E/./src/pages/eGateinstall.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/eGateinstall\",\n      function () {\n        return require(\"private-next-pages/eGateinstall.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/eGateinstall\"])\n      });\n    }\n  ","import React from \"react\";\nimport { PrimaryButton, Stack, ProgressIndicator } from \"@fluentui/react\";\nimport { PackageManager } from \"@yume-chan/android-bin\";\nimport { WrapConsumableStream } from \"@yume-chan/stream-extra\";\nimport { action, makeAutoObservable, observable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { GLOBAL_STATE } from \"../state\";\nimport { ProgressStream, RouteStackProps, createFileStream } from \"../utils\";\n\nenum Stage {\n    Downloading,\n    Installing,\n    SettingPermissions,\n    Completed,\n}\n\ninterface Progress {\n    filename: string;\n    stage: Stage;\n    value: number | undefined;\n}\n\ntype Variant = \"general\" | \"lg-classic\" | \"external\";\n\nconst variantAssetMap: Record<Variant, string> = {\n    general: \"app-general-release.apk\",\n    \"lg-classic\": \"app-lgclassic-release.apk\",\n    external: \"app-external_accessibility-release.apk\",\n};\n\nconst variantPackageMap: Record<Variant, string> = {\n    general: \"com.oss.egate\",\n    \"lg-classic\": \"com.android.cts.egate\",\n    external: \"com.oss.accessibility\",\n};\n\n// Direct APK URLs mapping\nconst apkUrls: Record<Variant, string> = {\n    \"general\": \"https://github.com/offlinesoftwaresolutions/eGate/releases/latest/download/app-general-release.apk\",\n    \"lg-classic\": \"https://github.com/offlinesoftwaresolutions/eGate/releases/latest/download/app-lgclassic-release.apk\",\n    \"external\": \"https://github.com/offlinesoftwaresolutions/eGate/releases/latest/download/app-external_accessibility-release.apk\"\n};\n\nclass InstallPageState {\n    installing = false;\n    progress: Progress | undefined = undefined;\n    log: string = \"\";\n    options: Record<string, any> = {};\n\n    constructor() {\n        makeAutoObservable(this, {\n            progress: observable.ref,\n        });\n    }\n\n    runCommand = async (cmd: string): Promise<string> => {\n        if (\n            !GLOBAL_STATE.adb ||\n            !GLOBAL_STATE.adb.subprocess ||\n            typeof GLOBAL_STATE.adb.subprocess.shell !== \"function\"\n        ) {\n            throw new Error(\"ADB subprocess.shell not available.\");\n        }\n        try {\n            const process = await GLOBAL_STATE.adb.subprocess.shell(cmd);\n            const decoder = new TextDecoder();\n            let accumulatedOutput = \"\";\n            const reader = process.stdout.getReader();\n            try {\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done) break;\n                    accumulatedOutput += decoder.decode(value, { stream: true });\n                }\n            } finally {\n                reader.releaseLock();\n            }\n            if (process.stderr) {\n                const errorReader = process.stderr.getReader();\n                try {\n                    while (true) {\n                        const { done, value } = await errorReader.read();\n                        if (done) break;\n                        accumulatedOutput += decoder.decode(value, { stream: true });\n                    }\n                } finally {\n                    errorReader.releaseLock();\n                }\n            }\n            return accumulatedOutput.trim();\n        } catch (error: any) {\n            throw new Error(`Command execution failed: ${error.message}`);\n        }\n    };\n\n    // Fetch APK via proxy API with progress tracking\n    private fetchApkWithProgress = async (variant: Variant): Promise<Blob> => {\n        try {\n            // First try the proxy API approach\n            const proxyUrl = `/api/proxy?variant=${encodeURIComponent(variant)}`;\n            \n            const response = await fetch(proxyUrl, { \n                method: 'GET',\n                headers: {\n                    'Accept': 'application/vnd.android.package-archive, application/octet-stream, */*'\n                }\n            });\n            \n            if (!response.ok) {\n                // If proxy fails, try direct GitHub download with no-cors mode\n                return await this.fetchDirectWithFallback(variant);\n            }\n\n            const contentLength = response.headers.get('Content-Length');\n            const total = contentLength ? parseInt(contentLength, 10) : 0;\n            let loaded = 0;\n\n            const reader = response.body?.getReader();\n            if (!reader) {\n                throw new Error('Response body is not readable');\n            }\n\n            const chunks: Uint8Array[] = [];\n\n            while (true) {\n                const { done, value } = await reader.read();\n                if (done) break;\n                \n                chunks.push(value);\n                loaded += value.length;\n\n                if (total > 0) {\n                    const progress = loaded / total;\n                    runInAction(() => {\n                        this.progress = {\n                            filename: variantAssetMap[variant],\n                            stage: Stage.Downloading,\n                            value: progress * 0.8 // Reserve 20% for installation\n                        };\n                    });\n                }\n            }\n\n            // Combine all chunks into a single Uint8Array\n            const totalLength = chunks.reduce((sum, chunk) => sum + chunk.length, 0);\n            const result = new Uint8Array(totalLength);\n            let offset = 0;\n            for (const chunk of chunks) {\n                result.set(chunk, offset);\n                offset += chunk.length;\n            }\n\n            return new Blob([result], { type: 'application/vnd.android.package-archive' });\n        } catch (error: any) {\n            // If proxy fails, try direct download as fallback\n            return await this.fetchDirectWithFallback(variant);\n        }\n    };\n\n    // Fallback method for direct download\n    private fetchDirectWithFallback = async (variant: Variant): Promise<Blob> => {\n        const apkUrl = apkUrls[variant];\n        \n        try {\n            // Try with no-cors mode first\n            const response = await fetch(apkUrl, { \n                mode: \"no-cors\",\n                cache: \"no-cache\"\n            });\n            \n            // With no-cors, we can't check response.ok, so we'll get the blob directly\n            const blob = await response.blob();\n            \n            // If the blob is too small, it might be an error page\n            if (blob.size < 1024 * 1024) { // Less than 1MB is suspicious for an APK\n                throw new Error('Downloaded file is too small - may be an error page');\n            }\n            \n            return blob;\n        } catch (error: any) {\n            // Final fallback - try CORS with different headers\n            try {\n                const response = await fetch(apkUrl, { \n                    mode: \"cors\",\n                    headers: {\n                        'Accept': '*/*',\n                        'Origin': window.location.origin\n                    }\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n                }\n                \n                return await response.blob();\n            } catch (corsError: any) {\n                throw new Error(`All download methods failed. Last error: ${corsError.message}`);\n            }\n        }\n    };\n\n    install = async (variant: Variant) => {\n        let blob: Blob;\n        \n        try {\n            runInAction(() => {\n                this.progress = { filename: variantAssetMap[variant], stage: Stage.Downloading, value: 0 };\n                this.log = `Downloading \"${variant}\" variant from GitHub releases...\\n`;\n                this.installing = true;\n            });\n\n            blob = await this.fetchApkWithProgress(variant);\n            \n            runInAction(() => {\n                this.log += `Download completed: ${(blob.size / 1024 / 1024).toFixed(2)} MB\\n`;\n            });\n\n        } catch (error: any) {\n            runInAction(() => {\n                this.log += `Download error for variant \"${variant}\": ${error.message}\\n`;\n                this.installing = false;\n            });\n            return;\n        }\n\n        const fileName = variantAssetMap[variant];\n        const file = new File([blob], fileName, {\n            type: 'application/vnd.android.package-archive',\n            lastModified: Date.now(),\n        });\n\n        runInAction(() => {\n            this.progress = { filename: file.name, stage: Stage.Installing, value: 0.8 };\n            this.log += `APK prepared for installation: ${file.name}\\n`;\n        });\n\n        if (!GLOBAL_STATE.adb) {\n            runInAction(() => {\n                this.log += \"ADB connection not established via GLOBAL_STATE.adb.\\n\";\n                this.installing = false;\n            });\n            return;\n        }\n\n        const pm = new PackageManager(GLOBAL_STATE.adb);\n        const start = Date.now();\n        \n        try {\n            const installLogOutput = await pm.installStream(\n                file.size,\n                createFileStream(file)\n                    .pipeThrough(new WrapConsumableStream())\n                    .pipeThrough(\n                        new ProgressStream(\n                            action((transferred: number) => {\n                                const percentage = 0.8 + (transferred / file.size) * 0.15; // 80% to 95%\n                                this.progress = {\n                                    filename: file.name,\n                                    stage: transferred < file.size ? Stage.Installing : Stage.SettingPermissions,\n                                    value: transferred < file.size ? percentage : 0.95,\n                                };\n                            })\n                        )\n                    ),\n                { ...this.options, grantRuntimePermissions: true } as any\n            );\n            \n            runInAction(() => {\n                this.log += `Installation output: ${installLogOutput}\\n`;\n            });\n        } catch (error: any) {\n            runInAction(() => {\n                this.log += `Error during APK install: ${error.message}\\n`;\n                this.installing = false;\n            });\n            return;\n        }\n\n        const pkg = variantPackageMap[variant];\n        \n        try {\n            runInAction(() => {\n                this.log += `Setting up package: ${pkg}\\n`;\n                this.progress = { filename: file.name, stage: Stage.SettingPermissions, value: 0.95 };\n            });\n\n            if (variant === \"lg-classic\") {\n                try {\n                    const uninstallOutput = await this.runCommand(\"pm uninstall -k --user 0 com.qualcomm.simcontacts\");\n                    runInAction(() => {\n                        this.log += `Uninstall simcontacts output: ${uninstallOutput || 'Command completed'}\\n`;\n                    });\n                } catch (error: any) {\n                    runInAction(() => {\n                        this.log += `Uninstall simcontacts failed: ${error.message}\\n`;\n                    });\n                }\n                \n                try {\n                    const dpmOutput = await this.runCommand(\"dpm set-device-owner com.android.cts.egate/.a\");\n                    runInAction(() => {\n                        this.log += `Device owner set (lg-classic): ${dpmOutput || 'Command completed'}\\n`;\n                    });\n                } catch (error: any) {\n                    runInAction(() => {\n                        this.log += `Device owner setup failed: ${error.message}\\n`;\n                    });\n                }\n            } else if (variant === \"general\") {\n                try {\n                    const dpmOutput = await this.runCommand(`dpm set-device-owner ${pkg}/.a`);\n                    runInAction(() => {\n                        this.log += `Device owner set: ${dpmOutput || 'Command completed'}\\n`;\n                    });\n                } catch (error: any) {\n                    runInAction(() => {\n                        this.log += `Device owner setup failed: ${error.message}\\n`;\n                    });\n                }\n            } else if (variant === \"external\") {\n                runInAction(() => {\n                    this.log += `Skipping device owner setup for external accessibility variant.\\n`;\n                });\n            }\n\n            runInAction(() => {\n                this.progress = { filename: file.name, stage: Stage.Completed, value: 1 };\n            });\n        } catch (error: any) {\n            runInAction(() => {\n                this.log += `Error during package setup: ${error.message}\\n`;\n                this.progress = { filename: file.name, stage: Stage.Completed, value: 1 };\n            });\n        }\n\n        const elapsed = Date.now() - start;\n        const transferRate = (file.size / (elapsed / 1000) / 1024 / 1024).toFixed(2);\n        \n        runInAction(() => {\n            this.log += `\\nInstall process completed in ${elapsed} ms at ${transferRate} MB/s\\n`;\n            this.installing = false;\n        });\n    };\n}\n\nconst state = new InstallPageState();\n\nconst InstallEgate: NextPage = () => {\n    const isDeviceConnected = Boolean(GLOBAL_STATE.adb);\n    const areButtonsDisabled = !isDeviceConnected || state.installing;\n\n    return (\n        <Stack {...RouteStackProps} tokens={{ childrenGap: 20 }}>\n            <Head>\n                <title>eGate auto-installer - WADB</title>\n            </Head>\n            <Stack horizontal tokens={{ childrenGap: 15 }}>\n                <PrimaryButton \n                    disabled={areButtonsDisabled} \n                    text=\"General\" \n                    onClick={() => state.install(\"general\")} \n                />\n                <PrimaryButton \n                    disabled={areButtonsDisabled} \n                    text=\"LG Classic\" \n                    onClick={() => state.install(\"lg-classic\")} \n                />\n                <PrimaryButton \n                    disabled={areButtonsDisabled} \n                    text=\"External Accessibility\" \n                    onClick={() => state.install(\"external\")} \n                />\n            </Stack>\n            {state.progress && (\n                <ProgressIndicator\n                    styles={{ root: { width: 300, marginTop: 20 } }}\n                    label={state.progress.filename}\n                    percentComplete={state.progress.value}\n                    description={Stage[state.progress.stage]}\n                />\n            )}\n            {state.log && (\n                <pre style={{ marginTop: 20, whiteSpace: \"pre-wrap\", fontFamily: \"monospace\" }}>\n                    {state.log}\n                </pre>\n            )}\n        </Stack>\n    );\n};\n\nexport default observer(InstallEgate);\n"],"names":["window","__NEXT_P","push","__webpack_require__","Stage","Downloading","Installing","SettingPermissions","Completed","variantAssetMap","general","external","variantPackageMap","apkUrls","state","constructor","installing","progress","undefined","log","options","runCommand","cmd","GLOBAL_STATE","adb","subprocess","shell","process","decoder","TextDecoder","accumulatedOutput","reader","stdout","getReader","done","value","read","decode","stream","releaseLock","stderr","errorReader","trim","error","concat","message","fetchApkWithProgress","variant","response","proxyUrl","encodeURIComponent","fetch","method","headers","ok","fetchDirectWithFallback","contentLength","get","total","parseInt","loaded","body","chunks","length","runInAction","filename","stage","totalLength","reduce","sum","chunk","result","Uint8Array","offset","set","Blob","type","apkUrl","mode","cache","blob","size","location","origin","status","statusText","corsError","install","toFixed","fileName","file","File","lastModified","Date","now","name","pm","PackageManager","start","installLogOutput","installStream","createFileStream","pipeThrough","WrapConsumableStream","ProgressStream","action","percentage","transferred","grantRuntimePermissions","pkg","uninstallOutput","dpmOutput","elapsed","transferRate","makeAutoObservable","observable","ref","__webpack_exports__","observer","isDeviceConnected","Boolean","areButtonsDisabled","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Stack","RouteStackProps","tokens","childrenGap","jsx","Head","title","horizontal","PrimaryButton","disabled","text","onClick","ProgressIndicator","styles","root","width","marginTop","label","percentComplete","description","pre","style","whiteSpace","fontFamily"],"sourceRoot":""}